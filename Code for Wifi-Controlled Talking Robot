#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <Talkie.h>

// WiFi credentials
const char* ssid = "YourWiFiSSID";
const char* password = "YourWiFiPassword";

// Motor control pins
const int motor1Pin1 = D1;
const int motor1Pin2 = D2;
const int motor2Pin1 = D3;
const int motor2Pin2 = D4;

// Talkie object for speech synthesis
Talkie voice;

ESP8266WebServer server(80);

void setup() {
  Serial.begin(9600);
  delay(100);

  // Initialize motor control pins
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);

  // Initialize Talkie library
  voice.begin();

  // Connect to WiFi network
  WiFi.begin(ssid, password);
  Serial.println("");
  
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  // Print the IP address
  Serial.println(WiFi.localIP());

  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", "NodeMCU Robot Control");
  });

  // Route to control robot movement
  server.on("/moveForward", HTTP_GET, [](AsyncWebServerRequest *request){
    moveForward();
    request->send(200, "text/plain", "Moving forward");
  });
  server.on("/moveBackward", HTTP_GET, [](AsyncWebServerRequest *request){
    moveBackward();
    request->send(200, "text/plain", "Moving backward");
  });
  server.on("/turnLeft", HTTP_GET, [](AsyncWebServerRequest *request){
    turnLeft();
    request->send(200, "text/plain", "Turning left");
  });
  server.on("/turnRight", HTTP_GET, [](AsyncWebServerRequest *request){
    turnRight();
    request->send(200, "text/plain", "Turning right");
  });
  server.on("/stop", HTTP_GET, [](AsyncWebServerRequest *request){
    stopMotors();
    request->send(200, "text/plain", "Stopping");
  });

  // Route to trigger speech synthesis
  server.on("/speak", HTTP_GET, [](AsyncWebServerRequest *request){
    speak("Hello, I am a talking robot!");
    request->send(200, "text/plain", "Speaking");
  });

  // Start server
  server.begin();
}

void loop() {
  server.handleClient();
}

void moveForward() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void moveBackward() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void turnLeft() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void turnRight() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void stopMotors() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}

void speak(const char* message) {
  voice.say(message);
}
